// <auto-generated />
using System;
using Library_mangement_backend;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Library_mangement_backend.Migrations
{
    [DbContext(typeof(LibContext))]
    [Migration("20211019101818_ChangedDb")]
    partial class ChangedDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Library_mangement_backend.Models.Books", b =>
                {
                    b.Property<int>("bookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BooksCartbookId")
                        .HasColumnType("int");

                    b.Property<string>("bookDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bookTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bookType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("bookId");

                    b.HasIndex("BooksCartbookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Library_mangement_backend.Models.BooksCart", b =>
                {
                    b.Property<int>("bookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("cartId")
                        .HasColumnType("int");

                    b.Property<int?>("userId")
                        .HasColumnType("int");

                    b.HasKey("bookId");

                    b.HasIndex("userId");

                    b.ToTable("BooksCarts");
                });

            modelBuilder.Entity("Library_mangement_backend.Models.Library", b =>
                {
                    b.Property<int?>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BooksbookId")
                        .HasColumnType("int");

                    b.Property<int?>("bookId")
                        .HasColumnType("int");

                    b.Property<int>("userId1")
                        .HasColumnType("int");

                    b.HasKey("userId");

                    b.HasIndex("BooksbookId");

                    b.HasIndex("userId1");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("Library_mangement_backend.Models.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("pincode")
                        .HasColumnType("int");

                    b.Property<string>("typeUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Library_mangement_backend.Models.Books", b =>
                {
                    b.HasOne("Library_mangement_backend.Models.BooksCart", "BooksCart")
                        .WithMany()
                        .HasForeignKey("BooksCartbookId");

                    b.Navigation("BooksCart");
                });

            modelBuilder.Entity("Library_mangement_backend.Models.BooksCart", b =>
                {
                    b.HasOne("Library_mangement_backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library_mangement_backend.Models.Library", b =>
                {
                    b.HasOne("Library_mangement_backend.Models.Books", "Books")
                        .WithMany()
                        .HasForeignKey("BooksbookId");

                    b.HasOne("Library_mangement_backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("userId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Books");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
